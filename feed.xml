<!DOCTYPE html>
<html lang="en">

<link rel="stylesheet" href="/js/prettify/prettify.css">
<script src="/js/prettify/prettify.js"></script>
<script type="text/javascript">
  $(function(){
    $("pre").addClass("prettyprint linenums");
    prettyPrint();
  });
</script>

<head>
    <meta charset="UTF-8">
    <title>WordWorth</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/js/jquery.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <link href="/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/theme.css" rel="stylesheet">
</head>

<body>

<div class="container-fluid">
    <div class="row-fluid">
        <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                  <span class="sr-only">Toggle navigation</span>
                  <span class="icon-bar"></span>
                  <span class="icon-bar"></span>
                  <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/">WordWorth</a>
              </div>
              <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav">
                    <li class="active"><a href="/">Home</a></li>
                    <li class="active visible-xs-block"><a href="/links.html">Links</a></li>
                    <li class="active"><a href="/archive.html">Archive</a></li>
                    <li class="active"><a href="/about.html">About</a></li>
                    <li class="active"><a href="/feed.xml">RSS</a></li>
                    
                      <li class="active"><a href="https://github.com/sosohu/sosohu.github.io">Github</a></li>
                    
                </ul>
              </div>
        </div>
    </div>
</div>


<div class="container container-left">
    <div class="row">
        <div class="col-md-3 hidden-xs">
            <div class="sidebar well">
sosohu
</div>

<div class="sidebar well">
    <h1>Recent Posts</h1>
    <ul>
        
          <li><a href="/2015/03/Xdotool%E6%A8%A1%E6%8B%9F%E5%B7%A5%E5%85%B7">Xdotool工具</a></li>
        
          <li><a href="/2015/02/Github-Jekyll-Markdown%E5%BC%80%E5%90%AF%E5%86%99%E4%BD%9C%E6%96%B0%E6%97%B6%E4%BB%A3">Github-Jekyll-Markdown开启写作新时代</a></li>
        
          <li><a href="/2015/02/Linux%E4%B8%8B%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90">linux下小工具推荐</a></li>
        
          <li><a href="/2014/12/C++%E7%9A%84this%E6%8C%87%E9%92%88">C++的this指针</a></li>
        
    </ul>
</div>

<div class="sidebar well">
	 <h1>Category</h1> 
	 <ul>
		 
		<li><a href="/c&c++">c&c++ 1</a> </li>
		 
		<li><a href="/tool">tool 2</a> </li>
		 
		<li><a href="/experience">experience 1</a> </li>
		 
	 </ul> 
</div>

<div class="sidebar well">
<h1>Links</h1>
<ul>
  <li><a href="https://cn.linkedin.com/in/sosohu">My Linkedin</a></li>
  <li><a href="https://github.com/sosohu">My Github</a></li>
  <li><a href="http://www.cnblogs.com/sosohu/">My CnBlogs</a></li>
</ul>

</div>

        </div>
        <div class="col-md-9">
            <?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>WordWorth</title>
		<description>sosohu</description>
		<link>http://sosohu.github.io/</link>
		<atom:link href="http://sosohu.github.io//feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Xdotool工具</title>
				<description>&lt;h2 id=&quot;什么是xdotool&quot;&gt;什么是Xdotool&lt;/h2&gt;

&lt;p&gt;Xdotool lets you simulate keyboard input and mouse activity, move and resize windows, etc. It does this using X11&amp;#39;s XTEST extension and other Xlib functions.&lt;/p&gt;

&lt;p&gt;Additionally, you can search for windows and move, resize, hide, and modify window properties like the title. If your window manager supports it, you can use xdotool to switch desktops, move windows between desktops, and change the number of desktops.&lt;/p&gt;

&lt;p&gt;For more information, please click &lt;a href=&quot;http://www.semicomplete.com/projects/xdotool/&quot;&gt;Xdotool Website&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;xdotool安装方法&quot;&gt;Xdotool安装方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  ubuntu系统下可以直接的使用&lt;code&gt;sudo apt-get install xdotool&lt;/code&gt;安装.&lt;/li&gt;
&lt;li&gt;  除了第一种情况外可以使用直接&lt;a href=&quot;http://semicomplete.googlecode.com/files/xdotool-2.20110530.1.tar.gz&quot;&gt;下载&lt;/a&gt;xdotool源码包,再编译安装.

&lt;ul&gt;
&lt;li&gt;  编译安装过程中会遇到缺少头文件或者依赖库,主要需要安装的有:

&lt;ul&gt;
&lt;li&gt;  libxkbcommon: &lt;a href=&quot;http://xkbcommon.org/download/libxkbcommon-0.3.1.tar.xz&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;  libXtst: 可以直接在源中apt-get安装(ferdora使用yum install)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;  编译安装方法

&lt;ul&gt;
&lt;li&gt;  make&lt;/li&gt;
&lt;li&gt;  export PREFIX=/usr(设置安装目录,默认在/usr/local)&lt;/li&gt;
&lt;li&gt;  make install&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xdotool的使用&quot;&gt;Xdotool的使用&lt;/h2&gt;

&lt;h3 id=&quot;鼠标操作&quot;&gt;鼠标操作&lt;/h3&gt;

&lt;p&gt;xdotool支持很多鼠标操作,包括鼠标的移动,左击,右击,滚轮等&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  鼠标移动到x,y处: xdotool mousemove x y&lt;/li&gt;
&lt;li&gt;  鼠标点击右键: xdotool click 3&lt;/li&gt;
&lt;li&gt;  鼠标向上翻滚: xdotool click 4&lt;/li&gt;
&lt;li&gt;  获取鼠标位置: xdotool getmouselocation&lt;/li&gt;
&lt;li&gt;  ...&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;键盘操作&quot;&gt;键盘操作&lt;/h3&gt;

&lt;p&gt;xdotool支持很多键盘操作,常用的使用如下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  按下p键: xdotool key p&lt;/li&gt;
&lt;li&gt;  按下ctrl+shift+t键: xdotool key ctrl+shift+t&lt;/li&gt;
&lt;li&gt;  按下p键持续1000ms: xdotool key --delay 1000  p&lt;/li&gt;
&lt;li&gt;  ...&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;窗口操作&quot;&gt;窗口操作&lt;/h3&gt;

&lt;p&gt;xdotool支持很多窗口操作,包括窗口的移动,最小化等等&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  查询主文件夹窗口id: xdotool search --name &amp;quot;主文件夹&amp;quot;&lt;/li&gt;
&lt;li&gt;  聚焦到id为WID的窗口: xdotool windowfocus WID&lt;/li&gt;
&lt;li&gt;  移动id为WID的窗口左上角到x,y处: xdotool windowmove WID x y&lt;/li&gt;
&lt;li&gt;  改变id为WID的窗口大小为w,h: xdotool windowsize WID w h&lt;/li&gt;
&lt;li&gt;  最小化id为WID的窗口: xdotool windowminimize WID&lt;/li&gt;
&lt;li&gt;  ...&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;简单示例&quot;&gt;简单示例&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#!/bin/bash

function open(){
    for((i=0;i&amp;lt;5;i++));
    do
        nautilus &amp;quot;/home/&amp;quot;
        kill -2 `ps -A | grep nautilus | cut -f-1 -d&amp;#39; &amp;#39;`
    done
}

#测试不断的打开和关闭文件浏览器
open  
nautilus &amp;quot;/home/&amp;quot;
sleep 5
WID=`xdotool search --name &amp;quot;文件浏览器&amp;quot; | tail -1`
echo $WID
xdotool windowfocus $WID

#gen the random num in [0, max)
function random(){
    if [[ $# -eq &amp;quot;0&amp;quot; ]]; then
        max=1000
    else
        max=$1
    fi
    rand_value=$[$RANDOM % $max]
    echo $rand_value
}

function drag(){
    x0=0
    y0=0
    xdotool windowmove $WID $x0 $y0
    for((i=0;i&amp;lt;500;i++));
    do
        #xdotool key ctrl+t
        x=$[$x0+$i]
        y=$[$y0+$i]
        xdotool windowmove $WID $x $y
        #xdotool windowminimize $WID 
        #sleep 4
    done
}

function move(){
    x1=`random`
    y1=`random`
    xdotool windowmove $WID $x1 $y1
}

function contineMove(){
    for((i=0;i&amp;lt;10000;i++));
    do
        move
        #sleep 1
    done
}

function resize(){
    x1=`random`
    y1=`random`
    xdotool windowsize $WID $x1 $y1
}

function contineResize(){
    for((i=0;i&amp;lt;$1;i++));
    do
        resize
    done
}


#拖拽窗口
#drag   

#移动窗口
#contineMove

#改变窗口大小
#contineResize 10000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;官方参考手册&quot;&gt;官方参考手册&lt;/h2&gt;

&lt;p&gt;在有些平台,编译安装xdotool之后,只能使用xdotool --help简单的查看命令,不能使用man xdotool查看手册,这里把上面的内容和官方参考手册一起作成&lt;a href=&quot;http://sosohu.github.io/static/xdotool.pdf&quot;&gt;pdf&lt;/a&gt;,以供下载使用.&lt;/p&gt;
</description>
				<pubDate>Mon, 09 Mar 2015 16:44:53 -0600</pubDate>
				<link>http://sosohu.github.io//2015/03/Xdotool%E6%A8%A1%E6%8B%9F%E5%B7%A5%E5%85%B7</link>
				<guid isPermaLink="true">http://sosohu.github.io//2015/03/Xdotool%E6%A8%A1%E6%8B%9F%E5%B7%A5%E5%85%B7</guid>
			</item>
		
			<item>
				<title>Github-Jekyll-Markdown开启写作新时代</title>
				<description>&lt;h2 id=&quot;为什么想到用这几个东西来写博客&quot;&gt;为什么想到用这几个东西来写博客&lt;/h2&gt;

&lt;p&gt;首先markdown用来写作已经是非常流行的了,确实非常方便高效,虽然表达能力没有latex丰富,但是已经算是即轻量级又比较美观的一种方式了,特别是github风格的markdown文章还是比较好看的.其次,我之前的博客要么在博客园这类网站上写,要么是在github的项目仓库中写&lt;img class=&#39;emoji&#39; title=&#39;sweat&#39; alt=&#39;sweat&#39; src=&#39;https://github.global.ssl.fastly.net/images/icons/emoji/sweat.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; &gt;, 但是感觉还是很不方便,而且觉得作为码农还是应该搭建一个自己的博客基地比较geek&lt;img class=&#39;emoji&#39; title=&#39;smile&#39; alt=&#39;smile&#39; src=&#39;https://github.global.ssl.fastly.net/images/icons/emoji/smile.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; &gt;, 可是我又想能够快速搭建起来,而且不要太麻烦,几经调研,发现github.io作为搭建平台非常的适合,结果也是很让我满意,大概仅仅只用一天时间,就基本搭建成功一个我觉得还比较满意的博客.&lt;/p&gt;

&lt;h2 id=&quot;怎么搭建的&quot;&gt;怎么搭建的&lt;/h2&gt;

&lt;p&gt;前面废话那么多,感觉的是在给你心灵鸡汤一样,但是我不会只给鸡汤不给汤勺的&lt;img class=&#39;emoji&#39; title=&#39;satisfied&#39; alt=&#39;satisfied&#39; src=&#39;https://github.global.ssl.fastly.net/images/icons/emoji/satisfied.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; &gt;, 下面就来介绍一下我搭建过程中的一些经验总结.&lt;/p&gt;

&lt;h3 id=&quot;准备工作&quot;&gt;准备工作&lt;/h3&gt;

&lt;h4 id=&quot;github账号:&quot;&gt;github账号:&lt;/h4&gt;

&lt;p&gt;这个不用多说了,很简单,去申请一个就行了.&lt;/p&gt;

&lt;h4 id=&quot;在gitbub上建立一个usename.github.io的仓库:&quot;&gt;在gitbub上建立一个usename.github.io的仓库:&lt;/h4&gt;

&lt;p&gt;usename是你的github账号名,貌似不一定非要叫这个名字,反正我是起的这个名字&lt;/p&gt;

&lt;h4 id=&quot;clone一个你喜欢的代码:&quot;&gt;clone一个你喜欢的代码:&lt;/h4&gt;

&lt;p&gt;github上jeklly做出来的各种主题都有很多代码,我这里使用的是&lt;a href=&quot;https://github.com/scotte/jekyll-clean&quot;&gt;scotte&lt;/a&gt;的jekyll-clean风格的主题,jekyll还有很多其他主题,你可以到它的官网看一看,然后找相应github上的样例代码.&lt;/p&gt;

&lt;h4 id=&quot;修改仓库变为自己的博客&quot;&gt;修改仓库变为自己的博客&lt;/h4&gt;

&lt;p&gt;clone完别人的代码之后,我们先来看一下整个仓库代码的结构:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.
├── about.html
├── archive.html
├── _config.yml
├── css
│   ├── bootstrap.min.css
│   └── theme.css
├── feed.xml
├── images
│   └── cc_by_88x31.png
├── _includes
│   ├── analytics.html
│   ├── disqus-comments.html
│   ├── disqus-counts.html
│   ├── footer.html
│   ├── header.html
│   ├── links-list.html
│   └── sidebar.html
├── index.html
├── js
│   ├── bootstrap.min.js
│   └── jquery.min.js
├── _layouts
│   ├── default.html
│   └── post.html
├── LICENSE
├── links.html
├── _posts
│   ├── 2012-05-22-Vivamus-porttitor-porta-tortor.md
│   ├── 2013-05-22-Nulla-vel-risus-dapibus.md
│   ├── 2013-06-22-Cum-sociis-natoque-penatibus.md
│   ├── 2014-06-22-Maecenas-feugiat-fringilla-nibh.md
│   ├── 2014-07-22-Lorem-ipsum-dolor-sit-amet.md
│   └── 2014-08-22-jekyll-clean-theme.md
└── README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你需要修改一下内容:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  _config.yml:  url改为你的url(usename.github.io), baseurl改为&amp;#39;&amp;#39;, name和description自定义.&lt;/li&gt;
&lt;li&gt;  _posts:   改为自己的博客,注意命名方法要遵循它的规则.&lt;/li&gt;
&lt;li&gt;  _include/links-list.html:  改为你的站内链接&lt;/li&gt;
&lt;li&gt;  about.html:   自我介绍.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改完之后,上传到github对应仓库之后,打开usename.github.io网站就可以看到效果啦.&lt;/p&gt;

&lt;h4 id=&quot;插件的使用&quot;&gt;插件的使用&lt;/h4&gt;

&lt;p&gt;主要推荐分类插件和评论插件.&lt;/p&gt;

&lt;h5 id=&quot;category&quot;&gt;category&lt;/h5&gt;

&lt;p&gt;默认代码里面有个archive.html其实就是按照时间进行分类,但是这很难让人满意,我们希望能够堆文章按照自己的要求分类.&lt;/p&gt;

&lt;p&gt;在本地仓库新建&lt;em&gt;plugins文件夹,然后将&lt;a href=&quot;https://github.com/shigeya/jekyll-category-archive-plugin/tree/master/_plugins&quot;&gt;archive-plugin&lt;/a&gt;中的plugins/categoryarchive&lt;/em&gt;plugin.rb拷贝到本地&lt;em&gt;plugins文件夹下,layout/category_archive.html拷贝到&lt;/em&gt;layouts文件夹下&lt;/p&gt;

&lt;p&gt;Note: github上的jekyll不支持插件,需要在本地的jekyll环境产生html文件后上传才可以达到效果.&lt;/p&gt;

&lt;h5 id=&quot;comments&quot;&gt;comments&lt;/h5&gt;

&lt;p&gt;评论插件很简单,你只需要去&lt;a href=&quot;http://disqus.com/&quot;&gt;DISQUS&lt;/a&gt;注册一个用户名,然后在&lt;em&gt;config.yml中disqus改为你的用户名,comments设为true, 最后再修改_includes/comments.ext文件中disqus&lt;/em&gt;shortname为你的用户名就可以了.&lt;/p&gt;

&lt;h4 id=&quot;本地搭建jekyll环境:&quot;&gt;本地搭建jekyll环境:&lt;/h4&gt;

&lt;p&gt;你可以不用搭建,然后每次提交代码到github上再看效果,搭建这个本地环境是为了让你能在本地实时的查看博客效果.&lt;/p&gt;

&lt;p&gt;先是安装ruby(最好是1.9.2版本之后的)和rake,然后安装jekyll&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install ruby rake
sudo gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果安装不了合适的ruby,可以自己到ruby官网下载最新版本,configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install安装,另外,你有可能无法gem install jekyll,那么因为GTW的原因,可以更换source mirror:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gem sources --remove https://rubygems.org/
gem sources -a http://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他的,你还需要安装nodejs&lt;/p&gt;

&lt;h4 id=&quot;使用jekyll本地产生文件&quot;&gt;使用jekyll本地产生文件&lt;/h4&gt;

&lt;p&gt;在项目代码根目录,执行jekyll build . &amp;amp;&amp;amp; jekyll serve然后打开网址&lt;a href=&quot;http://127.0.0.1:4000&quot;&gt;http://127.0.0.1:4000&lt;/a&gt; 即可查看效果&lt;/p&gt;
</description>
				<pubDate>Fri, 06 Feb 2015 10:58:35 -0600</pubDate>
				<link>http://sosohu.github.io//2015/02/Github-Jekyll-Markdown%E5%BC%80%E5%90%AF%E5%86%99%E4%BD%9C%E6%96%B0%E6%97%B6%E4%BB%A3</link>
				<guid isPermaLink="true">http://sosohu.github.io//2015/02/Github-Jekyll-Markdown%E5%BC%80%E5%90%AF%E5%86%99%E4%BD%9C%E6%96%B0%E6%97%B6%E4%BB%A3</guid>
			</item>
		
			<item>
				<title>linux下小工具推荐</title>
				<description>&lt;h2 id=&quot;valgrind&quot;&gt;Valgrind&lt;/h2&gt;

&lt;p&gt;Valgrind是一个检测C/C++程序内存问题的强大工具,相关使用介绍和方法请参考&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cn-valgrind/&quot;&gt;IBM某篇博客&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Thu, 05 Feb 2015 10:58:35 -0600</pubDate>
				<link>http://sosohu.github.io//2015/02/Linux%E4%B8%8B%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90</link>
				<guid isPermaLink="true">http://sosohu.github.io//2015/02/Linux%E4%B8%8B%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90</guid>
			</item>
		
			<item>
				<title>C++的this指针</title>
				<description>&lt;p&gt;这篇博客主要内容翻译自国外著名程序员网站：&lt;a href=&quot;http://www.geeksforgeeks.org&quot;&gt;geekersforgeekers&lt;/a&gt;,经过作者小幅度整理，水平有限，敬请指正.&lt;/p&gt;

&lt;h1 id=&quot;关于this指针的粗浅认识&quot;&gt;关于this指针的粗浅认识&lt;/h1&gt;

&lt;h2 id=&quot;(一)-this指针：&quot;&gt;(一)   this指针：&lt;/h2&gt;

&lt;p&gt;在对象的任意非static类型的成员函数被调用时候，this指针会作为一个隐藏的参数被秘密的传递给该成员函数．&lt;/p&gt;

&lt;h2 id=&quot;(二)-this指针的类型：&quot;&gt;(二)   this指针的类型：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先，this指针本身是一个const类型的指针(注意是指针是const的，不是指向的对象是const的)，例如对于类X，那么它的this指针类型就是X * const&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

class Test
{
    private:
        int x;
    public:
        Test(int x = 0) { this-&amp;gt;x = x; }
        void change(Test *t) { this = t; } 
        //试图赋值失败，因为this是const类型指针
        void print() { cout &amp;lt;&amp;lt; &amp;quot;x = &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; }
};

int main()
{
    Test obj(5);
    Test *ptr = new Test (10);
    obj.change(ptr);
    obj.print();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;另外，this指针指向的类型根据成员函数实际的类型确定，例如X有个const类型的成员函数, 那么this指针类型就const X * const&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include&amp;lt;iostream&amp;gt;
class X {
   void fun() const {
    // this is passed as hidden argument to fun(). 
    // Type of this is const X* 
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;(三)何时使用this指针&quot;&gt;(三)何时使用this指针&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当局部变量与类成员变量同名&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

/* local variable is same as a member&amp;#39;s name */
class Test
{
private:
   int x;
public:
   void setX (int x)
   {
       // The &amp;#39;this&amp;#39; pointer is used to retrieve the object&amp;#39;s x
       // hidden by the local variable &amp;#39;x&amp;#39;
       this-&amp;gt;x = x;
   }
   void print() { cout &amp;lt;&amp;lt; &amp;quot;x = &amp;quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; }
};

int main()
{
   Test obj;
   int x = 20;
   obj.setX(x);
   obj.print();
   return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回调用对象的引用时候&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/* Reference to the calling object can be returned */
Test&amp;amp; Test::func ()
{
   // Some processing
   return *this;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;(四)delete-this指针&quot;&gt;(四)delete this指针&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;什么？要删除this指针？对，你没有看错，就是要删出它，其实这也没什么奇怪的，需要注意的就是：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;   delete函数释放的只能是堆里面的内存，也就是说是new出来的空间&lt;/li&gt;
&lt;li&gt;   delete完this指针之后，对象的所有成员都不能再被访问&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面代码就会体现出来：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;class A
{
  public:
    void fun()
    {
        delete this;
    }
};

int main()
{
  /* Following is Valid */
  A *ptr = new A;
  ptr-&amp;gt;fun ; // 没有问题
  ptr = NULL // make ptr NULL to make sure that things are not accessed using ptr. 


  /* And following is Invalid: Undefined Behavior */
  A a;
  a.fun();　// 释放栈上的空间，会出错

  getchar();
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Wed, 10 Dec 2014 16:22:21 -0600</pubDate>
				<link>http://sosohu.github.io//2014/12/C++%E7%9A%84this%E6%8C%87%E9%92%88</link>
				<guid isPermaLink="true">http://sosohu.github.io//2014/12/C++%E7%9A%84this%E6%8C%87%E9%92%88</guid>
			</item>
		
	</channel>
</rss>

        </div>
    </div>
</div>

<!-- hitwebcounter Code START -->
<a href="http://www.hitwebcounter.com/" target="_blank">
<img src="http://hitwebcounter.com/counter/counter.php?page=6013407&style=0049&nbdigits=5&type=page&initCount=0" title="m" Alt="m"   border="0" >
</a><br/>
<!-- hitwebcounter.com --><a href="http://www.hitwebcounter.com/counterresources.php" title="Visits Total" 
target="_blank" style="font-family: Arial, Helvetica, sans-serif; 
font-size: 11px; color: #9C9E94; text-decoration: none ;"><strong>Visits Total</strong>
</a>   

<div class="container-fluid">
    <div class="row-fluid">
        <div class="span12 footer navbar-inverse navbar-fixed-bottom">
            <p class="copyright">&copy;2015 WordWorth. Powered by <a href="http://jekyllrb.com">Jekyll</a>, theme by <a href="https://github.com/scotte/jekyll-clean">Scott Emmons</a>
            under
            <a href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution</a></p>
        </div>
    </div>
</div>


  <script type="text/javascript">
    var disqus_shortname = 'sosohu';

   (function () {
     var s = document.createElement('script'); s.async = true;
     s.type = 'text/javascript';
     s.src = '//' + disqus_shortname + '.disqus.com/count.js';
     (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
   }());
 </script>





</body>
</html>

